{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = exports.build = exports.parseMetadata = exports.parse = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _xlsx = _interopRequireDefault(require(\"xlsx\"));\n\nvar _bufferFrom = _interopRequireDefault(require(\"buffer-from\"));\n\nvar _helpers = require(\"./helpers\");\n\nvar _workbook = _interopRequireDefault(require(\"./workbook\"));\n\nvar parse = function parse(mixed, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var workSheet = _xlsx.default[(0, _helpers.isString)(mixed) ? 'readFile' : 'read'](mixed, options);\n\n  return Object.keys(workSheet.Sheets).map(function (name) {\n    var sheet = workSheet.Sheets[name];\n    return {\n      name,\n      data: _xlsx.default.utils.sheet_to_json(sheet, {\n        header: 1,\n        raw: options.raw !== false,\n        range: options.range ? options.range[name] : null\n      })\n    };\n  });\n};\n\nexports.parse = parse;\n\nvar parseMetadata = function parseMetadata(mixed, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var workSheet = _xlsx.default[(0, _helpers.isString)(mixed) ? 'readFile' : 'read'](mixed, options);\n\n  return Object.keys(workSheet.Sheets).map(function (name) {\n    var sheet = workSheet.Sheets[name];\n    return {\n      name,\n      data: sheet[\"!ref\"] ? _xlsx.default.utils.decode_range(sheet[\"!ref\"]) : null\n    };\n  });\n};\n\nexports.parseMetadata = parseMetadata;\n\nvar build = function build(worksheets, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var defaults = {\n    bookType: 'xlsx',\n    bookSST: false,\n    type: 'binary'\n  };\n  var workBook = new _workbook.default();\n  worksheets.forEach(function (worksheet) {\n    var sheetName = worksheet.name || 'Sheet';\n    var sheetOptions = worksheet.options || {};\n    var sheetData = (0, _helpers.buildSheetFromMatrix)(worksheet.data || [], (0, _extends2.default)({}, options, sheetOptions));\n    workBook.SheetNames.push(sheetName);\n    workBook.Sheets[sheetName] = sheetData;\n  });\n\n  var excelData = _xlsx.default.write(workBook, (0, _extends2.default)({}, defaults, options));\n\n  return excelData instanceof Buffer ? excelData : (0, _bufferFrom.default)(excelData, 'binary');\n};\n\nexports.build = build;\nvar _default = {\n  parse,\n  parseMetadata,\n  build\n};\nexports.default = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["parse","options","workSheet","XLSX","sheet","data","header","raw","range","parseMetadata","build","defaults","bookType","bookSST","type","workBook","Workbook","worksheets","sheetName","worksheet","sheetOptions","sheetData","excelData"],"mappings":"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","sourcesContent":["import XLSX from 'xlsx';\nimport bufferFrom from 'buffer-from';\nimport {buildSheetFromMatrix, isString} from './helpers';\nimport Workbook from './workbook';\n\nexport const parse = (mixed, options = {}) => {\n  const workSheet = XLSX[isString(mixed) ? 'readFile' : 'read'](mixed, options);\n  return Object.keys(workSheet.Sheets).map((name) => {\n    const sheet = workSheet.Sheets[name];\n    return {name, data: XLSX.utils.sheet_to_json(sheet, {header: 1, raw: options.raw !== false\n      , range: options.range ? options.range[name] : null})};\n  });\n};\n\nexport const parseMetadata = (mixed, options = {}) => {\n  const workSheet = XLSX[isString(mixed) ? 'readFile' : 'read'](mixed, options);\n  return Object.keys(workSheet.Sheets).map((name) => {\n    const sheet = workSheet.Sheets[name];\n    return {name, data: sheet[\"!ref\"] ? XLSX.utils.decode_range(sheet[\"!ref\"]) : null };\n  });\n};\n\nexport const build = (worksheets, options = {}) => {\n  const defaults = {\n    bookType: 'xlsx',\n    bookSST: false,\n    type: 'binary'\n  };\n  const workBook = new Workbook();\n  worksheets.forEach((worksheet) => {\n    const sheetName = worksheet.name || 'Sheet';\n    const sheetOptions = worksheet.options || {};\n    const sheetData = buildSheetFromMatrix(worksheet.data || [], {...options, ...sheetOptions});\n    workBook.SheetNames.push(sheetName);\n    workBook.Sheets[sheetName] = sheetData;\n  });\n  const excelData = XLSX.write(workBook, {...defaults, ...options});\n  return excelData instanceof Buffer ? excelData : bufferFrom(excelData, 'binary');\n};\n\nexport default {parse, parseMetadata, build};\n"]},"metadata":{},"sourceType":"script"}