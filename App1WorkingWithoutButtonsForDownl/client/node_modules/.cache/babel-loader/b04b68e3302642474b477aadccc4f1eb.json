{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.buildSheetFromMatrix = exports.buildExcelDate = exports.isCellDescriptor = exports.isObject = exports.isString = exports.isNumber = exports.isBoolean = void 0;\n\nvar _xlsx = _interopRequireDefault(require(\"xlsx\"));\n\nvar ORIGIN_DATE = new Date(Date.UTC(1899, 11, 30));\n\nvar isBoolean = function isBoolean(maybeBoolean) {\n  return typeof maybeBoolean === 'boolean';\n};\n\nexports.isBoolean = isBoolean;\n\nvar isNumber = function isNumber(maybeNumber) {\n  return typeof maybeNumber === 'number';\n};\n\nexports.isNumber = isNumber;\n\nvar isString = function isString(maybeString) {\n  return typeof maybeString === 'string';\n};\n\nexports.isString = isString;\n\nvar isObject = function isObject(maybeObject) {\n  return maybeObject !== null && typeof maybeObject === 'object';\n};\n\nexports.isObject = isObject;\n\nvar isCellDescriptor = function isCellDescriptor(maybeCell) {\n  return isObject(maybeCell) && 'v' in maybeCell;\n};\n\nexports.isCellDescriptor = isCellDescriptor;\n\nvar buildExcelDate = function buildExcelDate(value, is1904) {\n  var epoch = Date.parse(value + (is1904 ? 1462 : 0));\n  return (epoch - ORIGIN_DATE) / 864e5;\n};\n\nexports.buildExcelDate = buildExcelDate;\n\nvar buildSheetFromMatrix = function buildSheetFromMatrix(data, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var workSheet = {};\n  var range = {\n    s: {\n      c: 1e7,\n      r: 1e7\n    },\n    e: {\n      c: 0,\n      r: 0\n    }\n  };\n  if (!Array.isArray(data)) throw new Error('sheet data is not array');\n\n  for (var R = 0; R !== data.length; R += 1) {\n    for (var C = 0; C !== data[R].length; C += 1) {\n      if (!Array.isArray(data[R])) throw new Error(`${R}th row data is not array`);\n      if (range.s.r > R) range.s.r = R;\n      if (range.s.c > C) range.s.c = C;\n      if (range.e.r < R) range.e.r = R;\n      if (range.e.c < C) range.e.c = C;\n\n      if (data[R][C] === null) {\n        continue; // eslint-disable-line\n      }\n\n      var cell = isCellDescriptor(data[R][C]) ? data[R][C] : {\n        v: data[R][C]\n      };\n\n      var cellRef = _xlsx.default.utils.encode_cell({\n        c: C,\n        r: R\n      });\n\n      if (isNumber(cell.v)) {\n        cell.t = 'n';\n      } else if (isBoolean(cell.v)) {\n        cell.t = 'b';\n      } else if (cell.v instanceof Date) {\n        cell.t = 'n';\n        cell.v = buildExcelDate(cell.v);\n        cell.z = cell.z || _xlsx.default.SSF._table[14]; // eslint-disable-line no-underscore-dangle\n\n        /* eslint-disable spaced-comment, no-trailing-spaces */\n\n        /***\n         * Allows for an non-abstracted representation of the data\n         *\n         * example: {t:'n', z:10, f:'=AVERAGE(A:A)'}\n         *\n         * Documentation:\n         * - Cell Object: https://sheetjs.gitbooks.io/docs/#cell-object\n         * - Data Types: https://sheetjs.gitbooks.io/docs/#data-types\n         * - Format: https://sheetjs.gitbooks.io/docs/#number-formats\n         **/\n\n        /* eslint-disable spaced-comment, no-trailing-spaces */\n      } else if (isObject(cell.v)) {\n        cell.t = cell.v.t;\n        cell.f = cell.v.f;\n        cell.z = cell.v.z;\n      } else {\n        cell.t = 's';\n      }\n\n      if (isNumber(cell.z)) cell.z = _xlsx.default.SSF._table[cell.z]; // eslint-disable-line no-underscore-dangle\n\n      workSheet[cellRef] = cell;\n    }\n  }\n\n  if (range.s.c < 1e7) {\n    workSheet['!ref'] = _xlsx.default.utils.encode_range(range);\n  }\n\n  if (options['!cols']) {\n    workSheet['!cols'] = options['!cols'];\n  }\n\n  if (options['!merges']) {\n    workSheet['!merges'] = options['!merges'];\n  }\n\n  return workSheet;\n};\n\nexports.buildSheetFromMatrix = buildSheetFromMatrix;","map":{"version":3,"sources":["../src/helpers.js"],"names":["ORIGIN_DATE","Date","isBoolean","isNumber","isString","isObject","maybeObject","isCellDescriptor","buildExcelDate","epoch","value","is1904","buildSheetFromMatrix","options","workSheet","range","s","c","r","e","Array","R","data","C","cell","v","cellRef","XLSX"],"mappings":"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","sourcesContent":["import XLSX from 'xlsx';\n\nconst ORIGIN_DATE = new Date(Date.UTC(1899, 11, 30));\n\nexport const isBoolean = (maybeBoolean) => typeof maybeBoolean === 'boolean';\nexport const isNumber = (maybeNumber) => typeof maybeNumber === 'number';\nexport const isString = (maybeString) => typeof maybeString === 'string';\nexport const isObject = (maybeObject) => maybeObject !== null && typeof maybeObject === 'object';\nexport const isCellDescriptor = (maybeCell) => isObject(maybeCell) && 'v' in maybeCell;\n\nexport const buildExcelDate = (value, is1904) => {\n  const epoch = Date.parse(value + (is1904 ? 1462 : 0));\n  return (epoch - ORIGIN_DATE) / 864e5;\n};\n\nexport const buildSheetFromMatrix = (data, options = {}) => {\n  const workSheet = {};\n  const range = {s: {c: 1e7, r: 1e7}, e: {c: 0, r: 0}};\n\n  if (!Array.isArray(data)) throw new Error('sheet data is not array');\n\n  for (let R = 0; R !== data.length; R += 1) {\n    for (let C = 0; C !== data[R].length; C += 1) {\n      if (!Array.isArray(data[R])) throw new Error(`${R}th row data is not array`);\n\n      if (range.s.r > R) range.s.r = R;\n      if (range.s.c > C) range.s.c = C;\n      if (range.e.r < R) range.e.r = R;\n      if (range.e.c < C) range.e.c = C;\n      if (data[R][C] === null) {\n        continue; // eslint-disable-line\n      }\n      const cell = isCellDescriptor(data[R][C]) ? data[R][C] : {v: data[R][C]};\n      const cellRef = XLSX.utils.encode_cell({c: C, r: R});\n      if (isNumber(cell.v)) {\n        cell.t = 'n';\n      } else if (isBoolean(cell.v)) {\n        cell.t = 'b';\n      } else if (cell.v instanceof Date) {\n        cell.t = 'n';\n        cell.v = buildExcelDate(cell.v);\n        cell.z = cell.z || XLSX.SSF._table[14]; // eslint-disable-line no-underscore-dangle\n\n        /* eslint-disable spaced-comment, no-trailing-spaces */\n        /***\n         * Allows for an non-abstracted representation of the data\n         *\n         * example: {t:'n', z:10, f:'=AVERAGE(A:A)'}\n         *\n         * Documentation:\n         * - Cell Object: https://sheetjs.gitbooks.io/docs/#cell-object\n         * - Data Types: https://sheetjs.gitbooks.io/docs/#data-types\n         * - Format: https://sheetjs.gitbooks.io/docs/#number-formats\n         **/\n        /* eslint-disable spaced-comment, no-trailing-spaces */\n      } else if (isObject(cell.v)) {\n        cell.t = cell.v.t;\n        cell.f = cell.v.f;\n        cell.z = cell.v.z;\n      } else {\n        cell.t = 's';\n      }\n      if (isNumber(cell.z)) cell.z = XLSX.SSF._table[cell.z]; // eslint-disable-line no-underscore-dangle\n      workSheet[cellRef] = cell;\n    }\n  }\n  if (range.s.c < 1e7) {\n    workSheet['!ref'] = XLSX.utils.encode_range(range);\n  }\n  if (options['!cols']) {\n    workSheet['!cols'] = options['!cols'];\n  }\n  if (options['!merges']) {\n    workSheet['!merges'] = options['!merges'];\n  }\n  return workSheet;\n};\n"]},"metadata":{},"sourceType":"script"}